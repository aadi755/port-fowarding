#!/bin/bash

DB_FILE="/tmp/port_tunnels.db"
SERVER="89.168.49.205"
USER="tunnel"
PASS_FILE="$HOME/.ssh/.tunnel_pass"
KEY_FILE="$HOME/.ssh/tunnel_key"

mkdir -p "$(dirname $DB_FILE)"
touch "$DB_FILE"

setup() {
    echo "🔑 Generating SSH key..."
    ssh-keygen -t ed25519 -f "$KEY_FILE" -N "" <<< y >/dev/null 2>&1

    echo "📦 Installing sshpass..."
    apt-get install -y sshpass >/dev/null 2>&1

    echo "📤 Copying SSH key to $USER@$SERVER ..."
    sshpass -f "$PASS_FILE" ssh-copy-id -i "$KEY_FILE.pub" -o StrictHostKeyChecking=no $USER@$SERVER
    echo "✅ Key copied successfully!"
}

add_tunnel() {
    LOCAL_PORT=$1
    TMPFILE=$(mktemp)

    ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -N -R 0:localhost:$LOCAL_PORT $USER@$SERVER >"$TMPFILE" 2>&1 &
    SSH_PID=$!

    sleep 2
    REMOTE_PORT=$(grep -oE 'Allocated port [0-9]+' "$TMPFILE" | awk '{print $3}')

    if [ -n "$REMOTE_PORT" ]; then
        echo "$LOCAL_PORT $REMOTE_PORT $SSH_PID" >>"$DB_FILE"
        echo "✅ Port $LOCAL_PORT forwarded → $SERVER:$REMOTE_PORT"
    else
        echo "❌ Failed to allocate remote port. Check connection."
        kill $SSH_PID 2>/dev/null
    fi
    rm -f "$TMPFILE"
}

list_tunnels() {
    if [ ! -s "$DB_FILE" ]; then
        echo "ℹ️ No active tunnels."
        return
    fi
    echo "Active tunnels:"
    cat "$DB_FILE"
}

stop_tunnel() {
    PORT=$1
    LINE=$(grep "^$PORT " "$DB_FILE")
    if [ -n "$LINE" ]; then
        PID=$(echo "$LINE" | awk '{print $3}')
        kill $PID
        sed -i "\|^$PORT |d" "$DB_FILE"
        echo "🛑 Tunnel on port $PORT stopped."
    else
        echo "⚠️ No tunnel found on port $PORT"
    fi
}

stop_all() {
    while read -r LINE; do
        PID=$(echo "$LINE" | awk '{print $3}')
        kill $PID 2>/dev/null
    done <"$DB_FILE"
    >"$DB_FILE"
    echo "🛑 All tunnels stopped."
}

reset() {
    stop_all
    rm -f "$DB_FILE"
    echo "🔄 Database reset."
}

case "$1" in
    setup) setup ;;
    add) add_tunnel "$2" ;;
    list) list_tunnels ;;
    stop) stop_tunnel "$2" ;;
    "stop all") stop_all ;;
    reset) reset ;;
    *) echo "Usage: port {setup|add <port>|list|stop <port>|stop all|reset}" ;;
esac
